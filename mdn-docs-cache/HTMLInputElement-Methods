<h2 id="Methods">Methods</h2>

<table class="standard-table">
 <tbody>
  <tr>
   <td><code>focus()</code></td>
   <td>Focus on the input element; keystrokes will subsequently go to this element.</td>
  </tr>
  <tr>
   <td><code>blur()</code></td>
   <td>Removes focus from input; keystrokes will subsequently go nowhere.</td>
  </tr>
  <tr>
   <td><code><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select">select()</a></code></td>
   <td>Selects the input text in the element, and focuses it so the user can subsequently replace the whole entry.</td>
  </tr>
  <tr>
   <td><code><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/click">click()</a></code></td>
   <td>Simulates a click on the element.</td>
  </tr>
  <tr>
   <td><code><a href="/en-US/docs/Web/API/HTMLInputElement/setSelectionRange">setSelectionRange()</a></code></td>
   <td>Selects a range of text in the element (but does not focus it). The optional selectionDirection parameter may be "forward" or "backward" to establish the direction in which selection was set, or "none" if the direction is unknown or not relevant. The default is "none". Specifying a selectionDirection parameter sets the value of the selectionDirection property.</td>
  </tr>
  <tr>
   <td><code>setRangeText()</code></td>
   <td>
    <dl>
     <dd>
     <p>Replaces a range of text with the new text. If the <var>start</var> and <var>end</var> arguments are not provided, the range is assumed to be the selection.The final argument determines how the selection should be set after the text has been replaced. The possible values are:</p>

     <dl>
      <dt>"<code>select</code>"</dt>
      <dd>Selects the newly inserted text.</dd>
      <dt>"<code>start</code>"</dt>
      <dd>Moves the selection to just before the inserted text.</dd>
      <dt>"<code>end</code>"</dt>
      <dd>Moves the selection to just after the selected text.</dd>
      <dt>"<code>preserve</code>"</dt>
      <dd>Attempts to preserve the selection. This is the default.</dd>
     </dl>
     </dd>
    </dl>
   </td>
  </tr>
  <tr>
   <td><code>setCustomValidity()</code></td>
   <td>Sets a custom validity message for the element. If this message is not the empty string, then the element is suffering from a custom validity error, and does not validate.</td>
  </tr>
  <tr>
   <td><code>checkValidity()</code></td>
   <td>Returns a {{jsxref("Boolean")}} that is <code>false</code> if the element is a candidate for constraint validation, and it does not satisfy its constraints. In this case, it also fires an {{event("invalid")}} event at the element. It returns <code>true</code> if the element is not a candidate for constraint validation, or if it satisfies its constraints.</td>
  </tr>
  <tr>
   <td><code>reportValidity()</code></td>
   <td>Runs the <code>checkValidity()</code> method, and if it returns false (for an invalid input or no pattern attribute provided), then it reports to the user that the input is invalid in the same manner as if you submitted a form.</td>
  </tr>
 </tbody>
</table>

<dl>
 <dt>{{domxref("HTMLInputElement.stepDown()")}}</dt>
 <dd>Decrements the {{htmlattrxref("value","input")}} by ({{htmlattrxref("step","input")}} * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:
 <ul>
  <li>if the method is not applicable to for the current {{htmlattrxref("type","input")}} value,</li>
  <li>if the element has no {{htmlattrxref("step","input")}} value,</li>
  <li>if the {{htmlattrxref("value","input")}} cannot be converted to a number,</li>
  <li>if the resulting value is above the {{htmlattrxref("max","input")}} or below the {{htmlattrxref("min","input")}}. </li>
 </ul>
 </dd>
 <dt>{{domxref("HTMLInputElement.stepUp()")}}</dt>
 <dd>Increments the {{htmlattrxref("value","input")}} by ({{htmlattrxref("step","input")}} * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:
 <ul>
  <li>if the method is not applicable to for the current {{htmlattrxref("type","input")}} value.,</li>
  <li>if the element has no {{htmlattrxref("step","input")}} value,</li>
  <li>if the {{htmlattrxref("value","input")}} cannot be converted to a number,</li>
  <li>if the resulting value is above the {{htmlattrxref("max","input")}} or below the {{htmlattrxref("min","input")}}.</li>
 </ul>
 </dd>
 <dt>{{domxref("HTMLInputElement.mozSetFileArray()")}}{{non-standard_inline}}</dt>
 <dd>Sets the files selected on the input to the given array of {{domxref("File")}} objects.  This is an alternative to <code>mozSetFileNameArray()</code> which can be used in frame scripts: a chrome script can <a href="/en-US/docs/Extensions/Using_the_DOM_File_API_in_chrome_code">open files as File objects</a> and send them via <a href="/en-US/Firefox/Multiprocess_Firefox/The_message_manager">message manager</a>.</dd>
 <dt>{{domxref("HTMLInputElement.mozGetFileNameArray()")}}{{non-standard_inline}}</dt>
 <dd>Returns an array of all the file names from the input.</dd>
 <dt>{{domxref("HTMLInputElement.mozSetFileNameArray()")}}{{non-standard_inline}}</dt>
 <dd>Sets the filenames for the files selected on the input.  Not for use in <a href="/en-US/Firefox/Multiprocess_Firefox/Limitations_of_frame_scripts">frame scripts</a>, because it accesses the file system.</dd>
 <dd>
 <ul>
 </ul>
 </dd>
</dl>

